import streamlit as st
import requests
import pandas as pd
import plotly.express as px
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from bs4 import BeautifulSoup


API_TEXT = "http://127.0.0.1:8000/analyze/"
API_FILE = "http://127.0.0.1:8000/analyze-file/"

st.title("üîç –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø–∞–¥–∞–ª–∏
if "df" not in st.session_state:
    st.session_state.df = None

# –ü–æ–ª–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
text_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")

if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"):
    if text_input.strip():
        try:
            response = requests.post(API_TEXT, json={"text": text_input})

            if response.status_code == 200:
                data = response.json()
                st.write(f"**–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** {data['sentiment']}")
                st.write(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:** {round(data['confidence'] * 100, 2)}%")
            else:
                st.error("–û—à–∏–±–∫–∞ API! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        except requests.exceptions.JSONDecodeError:
            st.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ API!")

    else:
        st.warning("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!")

# –ü–æ–ª–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ XLSX-—Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–æ–π 'MessageText'", type=["xlsx"])

if uploaded_file and st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"):
    try:
        files = {
            "file": ("file.xlsx", uploaded_file.getvalue(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        }
        response = requests.post(API_FILE, files=files)

        if response.status_code == 200:
            data = response.json()
            df = pd.DataFrame(data)
            st.session_state.df = df  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state

        else:
            st.error("–û—à–∏–±–∫–∞ API! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except requests.exceptions.JSONDecodeError:
        st.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ API!")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
if st.session_state.df is not None:
    df = st.session_state.df

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ HTML-—Ç–µ–≥–æ–≤
    def clean_html(text):
        return BeautifulSoup(text, "html.parser").get_text(strip=True)

    # –û—á–∏—Å—Ç–∏–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    df["MessageText"] = df["MessageText"].apply(clean_html)

    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    fig = px.pie(df, names="sentiment", title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏", hole=0.3)
    st.plotly_chart(fig)

    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    keyword = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:", "")

    all_classes = ["–í—Å–µ –∫–ª–∞—Å—Å—ã"] + list(df["sentiment"].unique())
    selected_class = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –∫–ª–∞—Å—Å—É:", all_classes)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    filtered_df = df  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–ª–Ω–æ–≥–æ DataFrame

    if keyword:
        filtered_df = filtered_df[filtered_df["MessageText"].str.contains(keyword, case=False, na=False)]

    if selected_class != "–í—Å–µ –∫–ª–∞—Å—Å—ã":
        filtered_df = filtered_df[filtered_df["sentiment"] == selected_class]
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    #if selected_class == "–í—Å–µ –∫–ª–∞—Å—Å—ã":
        #filtered_df = df
    #else:
        #filtered_df = df[df["sentiment"] == selected_class]

    st.write(filtered_df)  # –í—ã–≤–æ–¥–∏–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

